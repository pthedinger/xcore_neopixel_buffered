
#ifndef __letters_h__
#define __letters_h__

#include <print.h>

typedef uint8_t letter_t[NUM_ROWS];

// The letters take 5 bits, allow one extra for a gap
#define LETTER_WIDTH_BITS 6

#define NUM_LETTERS 59
letter_t letters[NUM_LETTERS] = {
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 32:   */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 33:   */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 34:   */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 35:   */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 36:   */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 37:   */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 38:   */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 39:   */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 40:   */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 41:   */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 42:   */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 43:   */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 44:   */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 45:   */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 46:   */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 47:   */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 48:   */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 49:   */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 50:   */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 51:   */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 52:   */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 53:   */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 54:   */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 55:   */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 56:   */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 57:   */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 58:   */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 59:   */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 60:   */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 61:   */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 62:   */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 63:   */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* 64:   */
    { 0x00, 0x0e, 0x11, 0x11, 0x11, 0x1f, 0x11, 0x11, 0x00, 0x00 }, /* A */
    { 0x00, 0x1e, 0x11, 0x11, 0x1e, 0x11, 0x11, 0x1e, 0x00, 0x00 }, /* B */
    { 0x00, 0x0e, 0x11, 0x10, 0x10, 0x10, 0x11, 0x0e, 0x00, 0x00 }, /* C */
    { 0x00, 0x1c, 0x12, 0x11, 0x11, 0x11, 0x12, 0x1c, 0x00, 0x00 }, /* D */
    { 0x00, 0x1f, 0x10, 0x10, 0x1c, 0x10, 0x10, 0x1f, 0x00, 0x00 }, /* E */
    { 0x00, 0x1f, 0x10, 0x10, 0x1c, 0x10, 0x10, 0x10, 0x00, 0x00 }, /* F */
    { 0x00, 0x0e, 0x11, 0x10, 0x17, 0x15, 0x11, 0x0e, 0x00, 0x00 }, /* G */
    { 0x00, 0x11, 0x11, 0x11, 0x1f, 0x11, 0x11, 0x11, 0x00, 0x00 }, /* H */
    { 0x00, 0x0e, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0e, 0x00, 0x00 }, /* I */
    { 0x00, 0x0e, 0x04, 0x04, 0x04, 0x04, 0x14, 0x08, 0x00, 0x00 }, /* J */
    { 0x00, 0x11, 0x11, 0x12, 0x1c, 0x12, 0x11, 0x11, 0x00, 0x00 }, /* K */
    { 0x00, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1f, 0x00, 0x00 }, /* L */
    { 0x00, 0x11, 0x1b, 0x15, 0x11, 0x11, 0x11, 0x11, 0x00, 0x00 }, /* M */
    { 0x00, 0x11, 0x11, 0x11, 0x19, 0x15, 0x13, 0x11, 0x00, 0x00 }, /* N */
    { 0x00, 0x0e, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0e, 0x00, 0x00 }, /* O */
    { 0x00, 0x1e, 0x11, 0x11, 0x1e, 0x10, 0x10, 0x10, 0x00, 0x00 }, /* P */
    { 0x00, 0x0e, 0x11, 0x11, 0x11, 0x15, 0x13, 0x0f, 0x00, 0x00 }, /* Q */
    { 0x00, 0x1e, 0x11, 0x11, 0x1e, 0x11, 0x11, 0x11, 0x00, 0x00 }, /* R */
    { 0x00, 0x0f, 0x10, 0x10, 0x0e, 0x01, 0x01, 0x1e, 0x00, 0x00 }, /* S */
    { 0x00, 0x1f, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00 }, /* T */
    { 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0e, 0x00, 0x00 }, /* U */
    { 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0a, 0x04, 0x00, 0x00 }, /* V */
    { 0x00, 0x11, 0x11, 0x15, 0x15, 0x15, 0x1b, 0x11, 0x00, 0x00 }, /* W */
    { 0x00, 0x11, 0x11, 0x0a, 0x04, 0x0a, 0x11, 0x11, 0x00, 0x00 }, /* X */
    { 0x00, 0x11, 0x11, 0x0a, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00 }, /* Y */
    { 0x00, 0x1f, 0x01, 0x02, 0x04, 0x08, 0x10, 0x1f, 0x00, 0x00 }, /* Z */
};

#define get_letter(l) letters[l - ' ']

static void render_letter(grid_state_t &grid, char letter, uint8_t r, uint8_t g, uint8_t b) {
    grid_reset_colors(&grid);
    letter_t &l = get_letter(letter);
    for (size_t row = 0; row < grid.num_rows; ++row) {
        uint8_t bits = l[row];
        for (size_t col = 0; col < 8; ++col) {
            if ((bits >> (7-col)) & 0x1) {
                pixel_set_col_row_rgb(&grid, col, row, r, g, b);
            }
        }
    }
}

static void render_text(out port neo, grid_state_t &grid, char *text, uint8_t r, uint8_t g, uint8_t b, int &time) {
    size_t num_letters = strlen(text);
    if (num_letters == 0) {
        return;
    }
    // printintln(num_letters);

    timer tmr;
    render_letter(grid, *text, r, g, b);
    time += 1000 * MILLISECONDS_TICKS;

    for (size_t i = 0; i < (num_letters - 1); ++i) {
        // printstr("Letter "); printintln(i);
        for (size_t offset = 1; offset <= LETTER_WIDTH_BITS; ++offset) {
            // printstr("Offset "); printintln(offset);
            grid_reset_colors(&grid);

            for (size_t row = 0; row < grid.num_rows; ++row) {
                size_t letter_index_offset = 0;
                uint32_t bits = 0;
                size_t num_bits_from_letter = LETTER_WIDTH_BITS - offset;
                size_t this_letter_offset = 0;

                int bits_remaining = grid.num_cols;
                while (bits_remaining > 0) {
                    // printstr("num_bits_from_letter "); printint(num_bits_from_letter); printstr(", this_letter_offset "); printintln(this_letter_offset);
                    uint32_t letter_bits = 0;

                    if (*(text + letter_index_offset)) {
                        letter_t &l = get_letter(*(text + letter_index_offset));
                        uint32_t mask = ((1 << num_bits_from_letter) - 1);
                        letter_bits = (l[row] >> this_letter_offset) & mask;
                    }

                    bits = (bits << num_bits_from_letter) | letter_bits;
                    bits_remaining -= num_bits_from_letter;

                    // Setup next letter values
                    num_bits_from_letter = (LETTER_WIDTH_BITS < bits_remaining) ? LETTER_WIDTH_BITS : bits_remaining;
                    this_letter_offset = LETTER_WIDTH_BITS - num_bits_from_letter;
                    letter_index_offset += 1;
                }
                // printstr("Bits 0x"); printhexln(bits);

                for (size_t col = 0; col < grid.num_cols; ++col) {
                    if ((bits >> (grid.num_cols - col)) & 0x1) {
                        pixel_set_col_row_rgb(&grid, col, row, r, g, b);
                    }
                }
            }
            tmr when timerafter(time) :> void;
            pixel_update_strip(neo, grid);
            tmr :> time;
            time += 100 * MILLISECONDS_TICKS;
        }

        text += 1;
    }
}

#endif // __letters_h__
